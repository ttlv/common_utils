// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/hashtech/common/services/sms (interfaces: SmsClient)

// Package mock_sms is a generated GoMock package.
package mock_sms

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	sms "github.com/ttlv/common_utils/services/sms"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockSmsClient is a mock of SmsClient interface
type MockSmsClient struct {
	ctrl     *gomock.Controller
	recorder *MockSmsClientMockRecorder
}

// MockSmsClientMockRecorder is the mock recorder for MockSmsClient
type MockSmsClientMockRecorder struct {
	mock *MockSmsClient
}

// NewMockSmsClient creates a new mock instance
func NewMockSmsClient(ctrl *gomock.Controller) *MockSmsClient {
	mock := &MockSmsClient{ctrl: ctrl}
	mock.recorder = &MockSmsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSmsClient) EXPECT() *MockSmsClientMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockSmsClient) Send(arg0 context.Context, arg1 *sms.SendParams, arg2 ...grpc.CallOption) (*sms.SendResp, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(*sms.SendResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockSmsClientMockRecorder) Send(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSmsClient)(nil).Send), varargs...)
}
